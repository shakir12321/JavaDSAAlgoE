An Array is a collection of items. The items could be integers, strings, DVDs, games, booksâ€”anything really.
The items are stored in neighboring (contiguous) memory locations. Because they're stored together, checking through the entire collection of
items is straightforward.

Creating an Array
On a computer, Arrays can hold up to N items. The value of N is decided by you, the programmer, at the time you create the Array.
This is the same as when we found a big enough cardboard box for the DVDs.
 Additionally, you also need to specify the type of item that will be going into the Array.

 // The actual code for creating an Array to hold DVD's.
 DVD[] dvdCollection = new DVD[15];

 // A simple definition for a DVD.
 public class DVD {
     public String name;
     public int releaseYear;
     public String director;

     public DVD(String name, int releaseYear, String director) {
         this.name = name;
         this.releaseYear = releaseYear;
         this.director = director;
     }

     public String toString() {
         return this.name + ", directed by " + this.director + ", released in " + this.releaseYear;
     }
 }


 // Firstly, we need to actually create a DVD object for The Avengers.
 DVD avengersDVD = new DVD("The Avengers", 2012, "Joss Whedon");

 // Next, we'll put it into the 8th place of the Array. Remember, because we
 // started numbering from 0, the index we want is 7.
 dvdCollection[7] = avengersDVD;

 / Print out what's in indexes 7, 10, and 3.
 System.out.println(dvdCollection[7]);


 Writing Items into an Array with a Loop
 We commonly use a loop to put lots of values into an Array. To illustrate this, let's go to another example.
 This time, we're going to create an Array of ints and put the first 10 square numbers into it.


 int[] squareNumbers = new int[10];

 // Go through each of the Array indexes, from 0 to 9.
 for (int i = 0; i < 10; i++) {
     // We need to be careful with the 0-indexing. The next square number
     // is given by (i + 1) * (i + 1).
     // Calculate it and insert it into the Array at index i.
     int square = (i + 1) * (i + 1);
     squareNumbers[i] = square;
 }

// For each VALUE in the Array.
for (int square : squareNumbers) {
    // Print the current value of square.
    System.out.println(square);
}
// Prints exactly the same as the previous example.

Let's say we've created a new Array like this.

Array Capacity

DVD[] array = new DVD[6]
Is it a valid operation to insert an element at array[6]? What about at array[10]?

Nope, neither of these are valid. When we created the Array, we specified that it can hold up to 6 DVD's. This is the Array's capacity.

Remembering that indexing starts at 0, we can only insert items at array[0], array[1], array[2], array[3], array[4], and array[5].
Trying to put an element anywhere else, such as array[-3], array[6], or array[100] will cause your code to crash with an ArrayIndexOutOfBoundsException!

The Array's capacity must be decided when the Array is created. The capacity cannot be changed later.

The capacity of an Array in Java can be checked by looking at the value of its length attribute.
This is done using the code arr.length, where arr is the name of the Array.

int capacity = array.length;
System.out.println("The Array has a capacity of " + capacity);

Array Length
The other definition of length is the number of DVDs, or other items, currently in the Array. This is something you'll need to keep track of yourself,
and you won't get any errors if you overwrite an existing DVD, or if you leave a gap in the Array.

// Create a new array with a capacity of 6.
int[] array = new int[6];

// Current length is 0, because it has 0 elements.
int length = 0;

// Add 3 items into it.
for (int i = 0; i < 3; i++) {
    array[i] = i * i;
    // Each time we add an element, the length goes up by one.
    length++;
}

System.out.println("The Array has a capacity of " + array.length);
System.out.println("The Array has a length of " + length);

Handling Array Parameters
Most Array questions on LeetCode have an Array passed in as a parameter, with no "length" or "capacity" parameter. What do we mean by this? Well, let's look at an example.
Here is the description for the first problem you'll be asked to solve.

Given a binary array, find the maximum number of consecutive 1s in this array.

And here is the code template you're given.


The only parameter is nums; an Array. You couldn't possibly solve this question without knowing how long nums is. Well, luckily it's straightforward.
When an Array is given as a parameter, without any additional information, you can safely assume that length == capacity.
That is, the Array is the exact right size to hold all of it's data. We can, therefore, use .length.

Be careful though, Array's are 0-indexed. The capacity/ length is a number of items, not a highest index. The highest index is .length - 1. Therefore, to iterate over all items in the Array, we can do the following.

class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        // Hint: Initialise and declare a variable here to
        // keep track of how many 1's you've seen in a row.
        for (int i = 0; i < nums.length; i++) {
            // Do something with element nums[i].
        }
    }
}

Inserting at the Start of an Array


/ First, we will have to create space for a new element.
// We do that by shifting each element one index to the right.
// This will firstly move the element at index 3, then 2, then 1, then finally 0.
// We need to go backwards to avoid overwriting any elements.
for (int i = 3; i >= 0; i--) {
    intArray[i + 1] = intArray[i];
}

// Now that we have created space for the new element,
// we can insert it at the beginning.
intArray[0] = 20;

Inserting Anywhere in the Array

// Say we want to insert the element at index 2.
// First, we will have to create space for the new element.
for (int i = 4; i >= 2; i--)
{
    // Shift each element one position to the right.
    intArray[i + 1] = intArray[i];
}

// Now that we have created space for the new element,
// we can insert it at the required index.
intArray[2] = 30;
